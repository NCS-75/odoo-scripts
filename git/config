[alias]

    # expected format: git rebase-pr 42
    # rebase a given pull request number on current branch
    # p = the number of the pr, e.g. 42
    # b = current user branch, e.g. master
    # r = the remote of current branch, e.g. origin
    # e.g. git fetch origin pull/42/head:pr-42
    rebase-pr = "!f() {\
        p=$1 && \
        b=`git symbolic-ref -q --short HEAD` && \
        r=`git config branch.$b.remote`; \
        r=${r:-origin} && \
        git fetch $r pull/$p/head:pr-$p && \
        git fetch -f $r pull/$p/merge:PR_MERGE_HEAD && \
        git rebase --onto $b PR_MERGE_HEAD^ pr-$p && \
        git checkout $b && \
        git merge --quiet --ff-only pr-$p && \
        git branch -D PR_MERGE_HEAD && \
        git branch -D pr-$p && \
        echo && \
        git diff --stat $b..$r/$b && echo && \
        git rebase -i $r/$b;}; f"

    # expected format: git get-br mart-e:patch-42
    # where "mart-e:patch-42" is the source in the description of the PR
    # if the remote is not present, add it
    # fetch the branch and checkout
    get-br = "!f() {\
        localbranch=`git symbolic-ref -q --short HEAD`; \
        localremote=`git config branch.$localbranch.remote`; \
        localurl=`git config remote.$localremote.url`; \
        \
        remote=`echo $1 | cut -d ":" -f1`; \
        branch=`echo $1 | cut -d ":" -f2`; \
        \
        remoteurlpresent=`git config remote.$remote.url`; \
        [ -z $remoteurlpresent ] && {  \
            \
            lefturl='git@github.com:'; \
            righturl=`echo $localurl | cut -d "/" -f2`; \
            \
            isssh=`echo $localurl | grep 'git@' | wc -l`; \
            [ $isssh -eq 0 ] && { \
                lefturl='https://github.com/'; \
                righturl=`echo $url | cut -d "/" -f5`; \
            }; \
            \
            newurl="$lefturl$remote/$righturl"; \
            git remote add $remote "$newurl"; \
            \
        }; \
        remotebranchpresent=`git config branch.$branch.remote`; \
        [[ -z $remotebranchpresent ]] && {  \
            git fetch $remote $branch; \
            git branch $branch $remote/$branch; \
        } || [[ "$remotebranchpresent" != "$remote" ]] && {  \
            echo "Branch $branch already present localy with remote $remotebranchpresent"; \
            exit;  \
        }; \
        git checkout $branch; \
        echo $remote/$branch; \
    }; f"

    # expected format: git rem-br odoo:my-master
    # clean after a git get-br
    rem-br = "!f() {\
        remote=`echo $1 | cut -d ":" -f1`; \
        branch=`echo $1 | cut -d ":" -f2`; \
        current=`git symbolic-ref -q --short HEAD`; \
        [[ "$current" == "$branch" ]] && {  \
            echo "Checkout in a different branch before removing $branch"; \
            exit;  \
        }; \
        git branch -D $branch; \
        git remote remove $remote; \
    }; f"

    # expected format: git create_pr mart-e/master
    # open a browser to create a PR to target remote/branch from current
    create-pr = "!f() {\
        branch=`git symbolic-ref -q --short HEAD`; \
        remote=`git config branch.$branch.remote`; \
        \
        remoteurl=`git config remote.$remote.url`; \
        rmiddleurl=`echo $remoteurl | cut -d ":" -f2 | cut -d "/" -f1`; \
        isssh=`echo $remoteurl | grep 'git@' | wc -l`; \
        [ $isssh -eq 0 ] && { \
            rmiddleurl=`echo $tremoteurl | cut -d "/" -f4`; \
        }; \
        \
        tremote=`echo $1 | cut -d "/" -f1`; \
        tbranch=`echo $1 | cut -d "/" -f2`; \
        \
        tremoteurl=`git config remote.$tremote.url`; \
        lefturl='https://github.com/'; \
        middleurl=`echo $tremoteurl | cut -d ":" -f2 | cut -d "/" -f1`; \
        righturl=`echo $tremoteurl | cut -d ":" -f2 | cut -d "/" -f2 | cut -d "." -f1`; \
        isssh=`echo $tremoteurl | grep 'git@' | wc -l`; \
        [ $isssh -eq 0 ] && { \
            middleurl=`echo $tremoteurl | cut -d "/" -f4`; \
            righturl=`echo $tremoteurl | cut -d "/" -f5 | cut -d "." -f1`; \
        }; \
        \
        compareurl="$lefturl$middleurl/$righturl/compare/$tbranch...$rmiddleurl:$branch"; \
        echo $compareurl; \
        xdg-open "$compareurl";\
    }; f"
